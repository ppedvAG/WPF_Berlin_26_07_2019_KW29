<Window x:Class="Cotainer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Cotainer"
        mc:Ignorable="d"
        Title="MainWindow" Height="727.432" Width="296.745">
    <!--In WPF können verschiedene Container mit unterschiedlichem Verhalten zum Layouting verwendet werden, um Controls anzuordnen-->
    <!--Der ScrollViewer zweigt automatisch eine ScrollBar an, wenn der Content des ScrollViewers im Fenster nicht mehr vollständig
        sichtbar ist-->
    <!--Einige Controls, wie die TextBox haben einen ScrollViewer eingebaut, welcher über eine AttachedProperty angesprochen werden kann-->
    <StackPanel>
        <!--Ein Canvas bietet seinem Content absolute Positions-Koordinaten an, an welchem die Objekte festgemacht werden-->
        <!--Über die AttachedProperties Canvas.Left und Canvas.Top (Props des Canvas, welche sich aber auf die Content-Elemente beziehen)
                kann die Position der Elemenete im Canvas definiert werden-->
        <Canvas Height="200">
            <Rectangle Fill="Green"
                       Height="50" Width="50"
                       Canvas.Left="100"
                       Canvas.Top="100"
                       Panel.ZIndex="1"/>
            <Ellipse Fill="Yellow"
                     Height="50" Width="50"
                     Canvas.Left="110"
                     Canvas.Top="110"/>
        </Canvas>

        <!--Border sind grafische Elemente mit einer Content-Eigenschaft-->
        <Border BorderBrush="CadetBlue"
                BorderThickness="3"
                CornerRadius="3">
            <!--StackPanels 'stapeln' die beinhaltenden Elemente je nach Orientierung, wobei sie in dieser Richtung den Elementen eine minimale
                Ausdehnung gestatten, in der anderen Richtung aber eine Maximale-->
            <StackPanel Orientation="Vertical">
                <Button Content="Button"/>
                <Button Content="Button"/>
                <Button Content="Button"/>
                <Button Content="Button"/>
                <Button Content="Button"/>
            </StackPanel>
        </Border>

        <!--WrapPanels agieren ähnlich wie StackPanels, verschieben jedoch die Elemente, wenn diese in einem Fenster nicht mehr sichtbar sind-->
        <WrapPanel>
            <Button Content="Button"/>
            <Button Content="Button"/>
            <Button Content="Button"/>
            <Button Content="Button"/>
            <Button Content="Button"/>
            <Button Content="Button"/>
            <Button Content="Button"/>
        </WrapPanel>

        <!--In DockPanels können Elemente über die AttachedProperty DockPanel.Dock einer Seite zugewiesen werden.
                Nicht zugewiesene Elemente teilen sich den verbleibenden Platz. Die Ausrichtung der Elemente orientiert
                sich zudem an der Zuweisungsreihenfolge-->
        <DockPanel Margin="5"
                   LastChildFill="False">
            <Button Content="Top"
                    DockPanel.Dock="Top"/>
            <Button Content="Bottom"
                    DockPanel.Dock="Bottom"/>
            <Button Content="Left"
                    DockPanel.Dock="Left"/>
            <Button Content="Right"
                    DockPanel.Dock="Right"/>
            <Button Content="Rest"/>
            <Button Content="Rest"/>
            <Button Content="Rest"/>
            <Button Content="Rest"/>
            <Button Content="Rest"/>
        </DockPanel>

        <!--In Grids müssen Spalten und Zeilen zunächst definiert werden, bevor den Elementen über Grid.Row
                    und Grid.Column eine Zelle zugeordnet wird.-->
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <!--In den GridDefinitions können Spalten und Zeilen Breite/Höhe zugewiesen werden.
                        Auto    = Minimaler Platz des gröten Elements der jeweiligen Spalte/Zeile
                        *       = verbleibender Platz-->
                <ColumnDefinition Width="100"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="2*"/>
            </Grid.ColumnDefinitions>


            <Button Content="Button"/>
            <Button Content="Button"
                    Grid.Column="1"/>
            <Button Content="Button"
                    Grid.Column="2"/>
            <Button Content="Button"
                    Grid.Row="1"
                    Grid.Column="2"
                    Grid.ColumnSpan="2"/>
        </Grid>

        <!--In UniformGrids kann man nur die Anzahl der Spalten und Zeilen angeben. Die Zuordnung der Elemente
                zu den Zellen erfolgt durch die Reihenfolge der Elementdeklaration in Xaml. Eine Angabe von Spalten- und Zeilen-
                größe ist nicht möglich.-->
        <UniformGrid Columns="2" Rows="2">
            <Button Content="Button"/>
            <Button Content="Button"/>
            <Button Content="Button"/>
            <Button Content="Button"/>
        </UniformGrid>

        <!--ViewBoxen bieten wie Images die Stretch-Property an, wodurch die Präsentation des Inhakts manipuliert werden kann-->
        <Viewbox Stretch="Uniform">
            <Button Content="Button"/>
        </Viewbox>

    </StackPanel>
</Window>
